<template>
  <div class="h-full flex flex-col">
    <!-- Başlık ve sekmeler -->
    <div class="mb-6">
      <div class="border-b border-gray-200">
        <nav class="-mb-px flex space-x-8">
          <button
            v-for="tab in tabs"
            :key="tab.id"
            @click="activeTab = tab.id"
            class="py-2 px-1 border-b-2 font-medium text-sm"
            :class="[
              activeTab === tab.id
                ? 'border-primary text-primary'
                : 'border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-300'
            ]"
          >
            {{ tab.name }}
          </button>
        </nav>
      </div>
    </div>

    <!-- Ana İçerik Alanı -->
    <div class="flex-1 overflow-y-hidden">
      <!-- Genel Ayarlar -->
      <div v-if="activeTab === 'general'" class="h-full overflow-y-auto p-4 bg-white rounded-lg shadow-md">
        <div class="mb-6">
          <h3 class="text-lg font-medium mb-4">Restoran Bilgileri</h3>
          
          <form @submit.prevent="saveRestaurantInfo" class="space-y-4">
            <div>
              <label class="block text-sm font-medium text-gray-700">Restoran Adı</label>
              <div class="mt-1 relative rounded-md shadow-sm">
                <div class="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
                  <i class="fas fa-store text-gray-400"></i>
                </div>
                <input 
                  v-model="restaurantForm.name" 
                  type="text" 
                  required 
                  class="pl-10 block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-primary focus:border-primary" 
                  placeholder="Restoran adı girin"
                />
              </div>
            </div>
            
            <div>
              <label class="block text-sm font-medium text-gray-700">Kısa Kod (URL Slug)</label>
              <div class="mt-1 relative rounded-md shadow-sm">
                <div class="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
                  <i class="fas fa-link text-gray-400"></i>
                </div>
                <input 
                  v-model="restaurantForm.slug" 
                  type="text" 
                  required 
                  class="pl-10 block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-primary focus:border-primary" 
                  placeholder="ornek-restoran"
                />
              </div>
              <p class="mt-1 text-xs text-gray-500">https://menu.restonom.com/<span class="font-medium">{{ restaurantForm.slug || 'ornek-restoran' }}</span></p>
            </div>
            
            <div>
              <label class="block text-sm font-medium text-gray-700">Adres</label>
              <div class="mt-1 relative rounded-md shadow-sm">
                <div class="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
                  <i class="fas fa-map-marker-alt text-gray-400"></i>
                </div>
                <textarea 
                  v-model="restaurantForm.address" 
                  rows="2" 
                  class="pl-10 block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-primary focus:border-primary" 
                  placeholder="Restoranın tam adresi"
                ></textarea>
              </div>
            </div>
            
            <div>
              <label class="block text-sm font-medium text-gray-700">Telefon</label>
              <div class="mt-1 relative rounded-md shadow-sm">
                <div class="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
                  <i class="fas fa-phone text-gray-400"></i>
                </div>
                <input 
                  v-model="restaurantForm.phone" 
                  type="tel" 
                  class="pl-10 block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-primary focus:border-primary" 
                  placeholder="0212 123 45 67"
                />
              </div>
            </div>
            
            <div>
              <label class="block text-sm font-medium text-gray-700">E-posta</label>
              <div class="mt-1 relative rounded-md shadow-sm">
                <div class="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
                  <i class="fas fa-envelope text-gray-400"></i>
                </div>
                <input 
                  v-model="restaurantForm.email" 
                  type="email" 
                  class="pl-10 block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-primary focus:border-primary" 
                  placeholder="iletisim@restoranınız.com"
                />
              </div>
            </div>
            
            <div>
              <label class="block text-sm font-medium text-gray-700">Vergi No</label>
              <div class="mt-1 relative rounded-md shadow-sm">
                <div class="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
                  <i class="fas fa-receipt text-gray-400"></i>
                </div>
                <input 
                  v-model="restaurantForm.tax_number" 
                  type="text" 
                  class="pl-10 block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-primary focus:border-primary" 
                  placeholder="Vergi numarası"
                />
              </div>
              <p class="mt-1 text-xs text-gray-500">Fatura bilgilerinde gösterilecek resmi vergi numaranız</p>
            </div>
            
            <div class="flex justify-end space-x-2 pt-4">
              <button 
                type="button" 
                @click="resetRestaurantForm" 
                class="px-4 py-2 border border-gray-300 rounded-md text-sm font-medium text-gray-700 hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-gray-500 flex items-center"
              >
                <i class="fas fa-undo mr-1"></i> Değişiklikleri Geri Al
              </button>
              <button 
                v-if="canWrite(adminModuleId)" 
                type="submit" 
                class="px-4 py-2 border border-transparent rounded-md shadow-sm text-sm font-medium text-white bg-primary hover:bg-primary-dark focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-primary flex items-center"
              >
                <i class="fas fa-save mr-1"></i> Bilgileri Kaydet
              </button>
            </div>
          </form>
        </div>
      </div>
      
      <!-- Menü Yönetimi -->
      <div v-if="activeTab === 'menu'" class="h-full overflow-y-auto p-4 bg-white rounded-lg shadow-md">
        <div class="flex justify-between items-center mb-6">
          <h3 class="text-lg font-medium">Menü Yönetimi</h3>
          <div class="flex space-x-3">
            <button 
              v-if="canWrite(adminModuleId)"
              @click="showCategoryModal"
              class="bg-blue-500 text-white text-sm px-4 py-2 rounded-md hover:bg-blue-600 flex items-center"
            >
              <i class="fas fa-folder-plus mr-2"></i> Kategori Yönet
            </button>
            <button 
              v-if="canWrite(adminModuleId)"
              @click="showMenuItemModal(null)"
              class="bg-primary text-white text-sm px-4 py-2 rounded-md hover:bg-primary-dark flex items-center"
            >
              <i class="fas fa-plus-circle mr-2"></i> Yeni Ürün Ekle
            </button>
          </div>
        </div>

        <!-- Arama ve Filtreleme -->
        <div class="bg-white p-4 border border-gray-200 rounded-lg shadow-sm mb-6">
          <div class="flex flex-col md:flex-row md:items-center space-y-3 md:space-y-0 md:space-x-4">
            <!-- Arama kutusu -->
            <div class="flex-1 relative">
              <div class="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
                <i class="fas fa-search text-gray-400"></i>
              </div>
              <input 
                type="text" 
                v-model="menuSearch" 
                placeholder="Menüde ara..." 
                class="pl-10 w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-primary focus:border-primary" 
              />
            </div>
            
            <!-- Kategori filtresi -->
            <div class="md:w-48">
              <select 
                v-model="selectedCategory" 
                class="w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-primary focus:border-primary"
              >
                <option value="">Tüm Kategoriler</option>
                <option v-for="category in availableCategories" :key="category" :value="category">{{ category }}</option>
              </select>
            </div>
            
            <!-- Sıralama -->
            <div class="md:w-48">
              <select 
                v-model="menuSort" 
                class="w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-primary focus:border-primary"
              >
                <option value="name">İsme Göre (A-Z)</option>
                <option value="name-desc">İsme Göre (Z-A)</option>
                <option value="price">Fiyata Göre (Azalan)</option>
                <option value="price-asc">Fiyata Göre (Artan)</option>
              </select>
            </div>
          </div>
          
          <!-- Kategori filtreleme butonları -->
          <div class="flex flex-wrap gap-2 mt-4">
            <button
              @click="selectedCategory = ''" 
              class="px-3 py-1 text-xs rounded-full font-medium transition-colors"
              :class="selectedCategory === '' ? 'bg-primary text-white' : 'bg-gray-200 text-gray-700 hover:bg-gray-300'"
            >
              Tümü
            </button>
            <button
              v-for="category in availableCategories" 
              :key="category"
              @click="selectedCategory = category" 
              class="px-3 py-1 text-xs rounded-full font-medium transition-colors"
              :class="selectedCategory === category ? 'bg-primary text-white' : 'bg-gray-200 text-gray-700 hover:bg-gray-300'"
            >
              {{ category }}
            </button>
          </div>
        </div>
        
        <!-- İstatistikler -->
        <div class="grid grid-cols-2 gap-4 mb-6">
          <div class="bg-blue-50 p-3 rounded-lg border border-blue-100 flex items-center">
            <div class="bg-blue-100 p-2 rounded-full text-blue-600 mr-3">
              <i class="fas fa-utensils"></i>
            </div>
            <div>
              <div class="text-xs text-gray-500">Toplam Ürün</div>
              <div class="text-lg font-semibold text-blue-700">{{ menuItems.length }}</div>
            </div>
          </div>
          
          <div class="bg-amber-50 p-3 rounded-lg border border-amber-100 flex items-center">
            <div class="bg-amber-100 p-2 rounded-full text-amber-600 mr-3">
              <i class="fas fa-layer-group"></i>
            </div>
            <div>
              <div class="text-xs text-gray-500">Kategori Sayısı</div>
              <div class="text-lg font-semibold text-amber-700">{{ availableCategories.length }}</div>
            </div>
          </div>
        </div>
        
        <div v-if="filteredMenuItems.length === 0" class="p-8 bg-gray-50 rounded-lg border border-gray-200 text-center">
          <div class="w-16 h-16 mx-auto mb-4 rounded-full bg-gray-200 flex items-center justify-center">
            <i class="fas fa-search text-gray-400 text-2xl"></i>
          </div>
          <h4 class="text-lg font-medium text-gray-500 mb-2">Ürün Bulunamadı</h4>
          <p class="text-sm text-gray-500">Arama kriterlerinize uygun ürün bulunamadı. Lütfen filtrelerinizi değiştirip tekrar deneyin.</p>
        </div>
        
        <div v-else class="grid grid-cols-1 md:grid-cols-3 lg:grid-cols-4 xl:grid-cols-5 gap-3">
          <div 
            v-for="item in filteredMenuItems" 
            :key="item.id"
            class="bg-white border border-gray-200 rounded-md overflow-hidden hover:shadow-sm transition-shadow flex flex-col"
          >
            <!-- Ürün Resmi (varsa) -->
            <div v-if="item.image_url" class="h-24 w-full bg-gray-100 overflow-hidden">
              <img :src="item.image_url" :alt="item.name" class="w-full h-full object-cover">
            </div>
            
            <div class="p-2 flex-1 flex flex-col justify-between">
              <div>
                <div class="flex justify-between items-start mb-1">
                  <h3 class="font-medium text-gray-900 text-sm line-clamp-1">{{ item.name }}</h3>
                  <div class="text-primary font-medium text-sm ml-1 whitespace-nowrap">{{ formatPrice(item.price) }}₺</div>
                </div>
                
                <div class="flex items-center text-xs text-gray-500 mb-1">
                  <span class="bg-gray-100 rounded-full px-2 py-0.5 text-xs">{{ item.category }}</span>
                  <span v-if="item.prep_time" class="flex items-center ml-1 text-xs"><i class="fas fa-clock mr-0.5 text-amber-500"></i>{{ item.prep_time }}dk</span>
                </div>
                
                <!-- Opsiyonlar (varsa ve minimal) -->
                <div v-if="item.options && item.options.length > 0" class="text-xs text-gray-500 flex items-center">
                  <i class="fas fa-plus-circle text-green-500 mr-1"></i>
                  <span>{{ item.options.length }} opsiyon</span>
                </div>
              </div>
              
              <div class="mt-1 pt-1 border-t border-gray-100 flex justify-end space-x-1">
                <button 
                  v-if="canWrite(adminModuleId)" 
                  @click="showMenuItemModal(item)" 
                  class="text-blue-500 hover:bg-blue-50 p-1 rounded"
                  title="Düzenle"
                >
                  <i class="fas fa-edit"></i>
                </button>
                <button 
                  v-if="canWrite(adminModuleId)" 
                  @click="deleteMenuItem(item.id)" 
                  class="text-red-500 hover:bg-red-50 p-1 rounded"
                  title="Sil"
                >
                  <i class="fas fa-trash-alt"></i>
                </button>
              </div>
            </div>
          </div>
        </div>
        
        <!-- Menü yükleniyor veya boş -->
        <div v-if="menuItems.length === 0 && !menuSearch" class="text-center py-16 bg-gray-50 rounded-lg">
          <div class="w-20 h-20 mx-auto mb-4 rounded-full bg-gray-200 flex items-center justify-center">
            <i class="fas fa-utensils text-gray-400 text-3xl"></i>
          </div>
          <h3 class="text-lg font-medium text-gray-700 mb-2">Henüz Menü Öğesi Yok</h3>
          <p class="text-sm text-gray-500 mb-6 max-w-md mx-auto">Restoranınızın menüsünü oluşturmak için "Yeni Ürün Ekle" butonuna tıklayarak ürünlerinizi ekleyebilirsiniz.</p>
          <button 
            v-if="canWrite(adminModuleId)"
            @click="showMenuItemModal(null)"
            class="bg-primary text-white px-4 py-2 rounded-md hover:bg-primary-dark inline-flex items-center"
          >
            <i class="fas fa-plus-circle mr-2"></i> Yeni Ürün Ekle
          </button>
        </div>
      </div>
      
      <!-- Raporlar -->
      <div v-if="activeTab === 'reports'" class="h-full overflow-y-auto p-4 bg-white rounded-lg shadow-md">
        <div class="mb-6">
          <div class="flex justify-between items-center mb-6">
            <h3 class="text-lg font-medium">Satış Raporları</h3>
            <div class="flex items-center space-x-3">
              <div class="text-sm text-gray-500 flex items-center mr-2">
                <i class="fas fa-calendar-alt mr-1"></i> Dönem:
              </div>
              <select 
                v-model="reportPeriod" 
                class="text-sm border border-gray-300 rounded-md px-3 py-1.5 bg-white shadow-sm focus:outline-none focus:ring-primary focus:border-primary"
              >
                <option value="day">Bugün</option>
                <option value="week">Bu Hafta</option>
                <option value="month">Bu Ay</option>
                <option value="year">Bu Yıl</option>
              </select>
              <button class="text-primary hover:text-primary-dark text-sm flex items-center">
                <i class="fas fa-download mr-1"></i> Rapor İndir
              </button>
            </div>
          </div>
          
          <!-- Kart İstatistikleri -->
          <div class="grid grid-cols-1 md:grid-cols-4 gap-4 mb-6">
            <div class="bg-blue-50 p-4 rounded-lg border border-blue-100 flex items-center">
              <div class="bg-blue-100 p-3 rounded-full text-blue-600 mr-4">
                <i class="fas fa-coins"></i>
              </div>
              <div>
                <div class="text-sm text-gray-500">Toplam Satış</div>
                <div class="text-2xl font-bold text-blue-700">{{ formatPrice(dailySales) }} ₺</div>
                <div class="text-xs text-green-600 mt-1">
                  <i class="fas fa-arrow-up mr-1"></i> %8.5 artış
                </div>
              </div>
            </div>
            
            <div class="bg-green-50 p-4 rounded-lg border border-green-100 flex items-center">
              <div class="bg-green-100 p-3 rounded-full text-green-600 mr-4">
                <i class="fas fa-receipt"></i>
              </div>
              <div>
                <div class="text-sm text-gray-500">Fiş Sayısı</div>
                <div class="text-2xl font-bold text-green-700">{{ receiptCount }}</div>
                <div class="text-xs text-green-600 mt-1">
                  <i class="fas fa-arrow-up mr-1"></i> %4.2 artış
                </div>
              </div>
            </div>
            
            <div class="bg-purple-50 p-4 rounded-lg border border-purple-100 flex items-center">
              <div class="bg-purple-100 p-3 rounded-full text-purple-600 mr-4">
                <i class="fas fa-shopping-cart"></i>
              </div>
              <div>
                <div class="text-sm text-gray-500">Ortalama Sepet</div>
                <div class="text-2xl font-bold text-purple-700">{{ formatPrice(averageOrder) }} ₺</div>
                <div class="text-xs text-green-600 mt-1">
                  <i class="fas fa-arrow-up mr-1"></i> %6.8 artış
                </div>
              </div>
            </div>
            
            <div class="bg-amber-50 p-4 rounded-lg border border-amber-100 flex items-center">
              <div class="bg-amber-100 p-3 rounded-full text-amber-600 mr-4">
                <i class="fas fa-users"></i>
              </div>
              <div>
                <div class="text-sm text-gray-500">Müşteri Sayısı</div>
                <div class="text-2xl font-bold text-amber-700">{{ customerCount }}</div>
                <div class="text-xs text-red-600 mt-1">
                  <i class="fas fa-arrow-down mr-1"></i> %2.1 azalış
                </div>
              </div>
            </div>
          </div>
          
          <!-- Grafikler ve Tablolar -->
          <div class="grid grid-cols-1 md:grid-cols-3 gap-6">
            <!-- Satış Grafiği -->
            <div class="md:col-span-2 bg-white p-5 rounded-lg border border-gray-200 shadow-sm">
              <div class="flex justify-between items-center mb-4">
                <h4 class="font-medium text-gray-700 flex items-center">
                  <i class="fas fa-chart-line text-primary mr-2"></i> Satış Grafiği
                </h4>
                <div class="flex space-x-2">
                  <button 
                    v-for="view in ['day', 'week', 'month']" 
                    :key="view"
                    @click="chartView = view"
                    class="px-2 py-1 text-xs rounded-md transition-colors"
                    :class="chartView === view ? 'bg-primary text-white' : 'bg-gray-100 text-gray-700 hover:bg-gray-200'"
                  >
                    {{ {'day': 'Gün', 'week': 'Hafta', 'month': 'Ay'}[view] }}
                  </button>
                </div>
              </div>
              
              <div class="h-72 bg-gray-50 rounded-lg p-2 flex items-center justify-center border border-gray-100">
                <div v-if="isChartLoading" class="text-center">
                  <div class="animate-spin rounded-full h-8 w-8 border-b-2 border-primary mx-auto mb-2"></div>
                  <p class="text-sm text-gray-500">Grafik yükleniyor...</p>
                </div>
                <div v-else class="w-full h-full">
                  <!-- Görsel bir grafik yerine basit bir mockup gösterelim -->
                  <div class="flex items-end justify-between h-full pt-4 px-2">
                    <div v-for="n in 12" :key="n" class="flex flex-col items-center">
                      <div 
                        class="w-12 bg-primary-light/80 hover:bg-primary-light rounded-t"
                        :style="`height: ${Math.floor(Math.random() * 100) + 50}px`"
                      ></div>
                      <div class="text-xs text-gray-500 mt-2">{{ n }}</div>
                    </div>
                  </div>
                </div>
              </div>
            </div>
            
            <!-- En Çok Satan Ürünler -->
            <div class="bg-white p-5 rounded-lg border border-gray-200 shadow-sm">
              <h4 class="font-medium text-gray-700 mb-4 flex items-center">
                <i class="fas fa-award text-primary mr-2"></i> En Çok Satan Ürünler
              </h4>
              
              <div class="space-y-3">
                <div 
                  v-for="(item, index) in topSellingItems.slice(0, 5)" 
                  :key="index"
                  class="flex items-center border-b border-gray-100 pb-3"
                >
                  <div class="flex-shrink-0 w-8 h-8 flex items-center justify-center" :class="{
                    'text-yellow-500': index === 0,
                    'text-gray-400': index === 1,
                    'text-amber-600': index === 2,
                    'text-gray-500': index > 2
                  }">
                    <i :class="{
                      'fas fa-trophy': index === 0,
                      'fas fa-medal': index === 1 || index === 2,
                      'fas fa-circle': index > 2
                    }" class="text-xs"></i>
                  </div>
                  <div class="flex-1 min-w-0">
                    <p class="text-sm font-medium text-gray-900 truncate">{{ item.name }}</p>
                    <p class="text-xs text-gray-500">{{ item.category }} · {{ item.quantity }} adet</p>
                  </div>
                  <div class="text-sm font-medium text-primary">{{ formatPrice(item.total) }} ₺</div>
                </div>
              </div>
              
              <div class="mt-4 pt-3 border-t border-gray-100">
                <button class="w-full text-center text-sm text-primary font-medium hover:text-primary-dark p-2 rounded-md hover:bg-gray-50">
                  <i class="fas fa-list mr-1"></i> Tüm Ürünleri Gör
                </button>
              </div>
            </div>
          </div>
          
          <!-- Özet Tablo -->
          <div class="mt-6 bg-white p-5 rounded-lg border border-gray-200 shadow-sm">
            <div class="flex justify-between items-center mb-4">
              <h4 class="font-medium text-gray-700 flex items-center">
                <i class="fas fa-table text-primary mr-2"></i> Satış Özeti
              </h4>
              <div class="flex space-x-2">
                <button class="text-sm text-gray-500 hover:text-primary flex items-center">
                  <i class="fas fa-filter mr-1"></i> Filtrele
                </button>
                <button class="text-sm text-gray-500 hover:text-primary flex items-center">
                  <i class="fas fa-download mr-1"></i> CSV İndir
                </button>
              </div>
            </div>
            
            <div class="overflow-hidden border border-gray-200 rounded-lg">
              <table class="min-w-full divide-y divide-gray-200">
                <thead class="bg-gray-50">
                  <tr>
                    <th scope="col" class="px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                      Ürün
                    </th>
                    <th scope="col" class="px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                      Kategori
                    </th>
                    <th scope="col" class="px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                      Satış Adedi
                    </th>
                    <th scope="col" class="px-4 py-3 text-right text-xs font-medium text-gray-500 uppercase tracking-wider">
                      Birim Fiyat
                    </th>
                    <th scope="col" class="px-4 py-3 text-right text-xs font-medium text-gray-500 uppercase tracking-wider">
                      Toplam
                    </th>
                  </tr>
                </thead>
                <tbody class="bg-white divide-y divide-gray-200">
                  <tr v-for="(item, index) in topSellingItems" :key="index" class="hover:bg-gray-50">
                    <td class="px-4 py-3 whitespace-nowrap">
                      <div class="text-sm font-medium text-gray-900">{{ item.name }}</div>
                    </td>
                    <td class="px-4 py-3 whitespace-nowrap">
                      <span class="text-xs font-medium px-2 py-1 rounded-full" 
                        :class="{
                          'bg-red-100 text-red-800': item.category === 'Ana Yemekler',
                          'bg-purple-100 text-purple-800': item.category === 'Tatlılar',
                          'bg-blue-100 text-blue-800': item.category === 'İçecekler',
                          'bg-green-100 text-green-800': item.category === 'Mezeler',
                          'bg-yellow-100 text-yellow-800': item.category === 'Salatalar',
                          'bg-gray-100 text-gray-800': !['Ana Yemekler', 'Tatlılar', 'İçecekler', 'Mezeler', 'Salatalar'].includes(item.category)
                        }">
                        {{ item.category }}
                      </span>
                    </td>
                    <td class="px-4 py-3 whitespace-nowrap text-sm text-gray-900">
                      {{ item.quantity }}
                    </td>
                    <td class="px-4 py-3 whitespace-nowrap text-sm text-gray-900 text-right">
                      {{ formatPrice(item.total / item.quantity) }} ₺
                    </td>
                    <td class="px-4 py-3 whitespace-nowrap text-right">
                      <div class="text-sm font-medium text-primary">{{ formatPrice(item.total) }} ₺</div>
                    </td>
                  </tr>
                </tbody>
              </table>
            </div>
          </div>
        </div>
      </div>
      
      <!-- Panel Ayarları -->
      <div v-if="activeTab === 'panel'" class="h-full overflow-y-auto p-4 bg-white rounded-lg shadow-md">
        <div class="mb-6">
          <div class="flex justify-between items-center mb-4">
            <h3 class="text-lg font-medium">Panel ve Görünüm Ayarları</h3>
            <div class="text-sm text-gray-500 flex items-center">
              <i class="fas fa-info-circle mr-1"></i> Son değişiklik: {{ lastSettingsSaved || 'Hiç kaydedilmedi' }}
            </div>
          </div>
          
          <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
            <!-- Sol Panel - Görsel Önizleme -->
            <div class="bg-gray-50 p-5 rounded-lg border border-gray-200">
              <h4 class="font-medium text-gray-700 mb-4">Görünüm Önizleme</h4>
              
              <div class="border border-gray-200 rounded-lg bg-white shadow-sm overflow-hidden">
                <!-- Header Önizleme -->
                <div class="bg-primary text-white p-4">
                  <div class="flex items-center justify-between">
                    <div>
                      <div v-if="panelForm.showLogo" class="h-10 w-32 bg-white/20 rounded flex items-center justify-center text-xs text-white/70">
                        LOGO
                      </div>
                      <div v-else class="font-bold text-lg">Örnek Restoran</div>
                      <div v-if="panelForm.showSubtext && !panelForm.showLogo" class="text-xs text-white/80 mt-1">
                        {{ panelForm.subtextContent || 'Restoran Yönetim Paneli' }}
                      </div>
                    </div>
                    <div class="flex items-center space-x-1">
                      <span class="w-8 h-8 rounded-full bg-white/20 flex items-center justify-center">
                        <i class="fas fa-user text-sm"></i>
                      </span>
                    </div>
                  </div>
                </div>
                
                <!-- Sidebar Önizleme -->
                <div class="flex">
                  <div class="w-1/4 bg-white border-r border-gray-200 p-3">
                    <div class="text-xs text-gray-500 mb-2 pb-1 border-b border-gray-100">Modüller</div>
                    <div class="space-y-1">
                      <div v-for="(item, i) in ['Satış', 'Mutfak', 'Masalar']" :key="i" 
                        class="text-xs py-1 px-2 rounded-md" 
                        :class="i === 0 ? 'bg-primary/10 text-primary' : 'text-gray-700'">
                        {{ item }}
                      </div>
                    </div>
                  </div>
                  
                  <div class="w-3/4 p-3">
                    <div class="h-20 bg-gray-100 rounded-md flex items-center justify-center text-xs text-gray-400">
                      Modül içeriği
                    </div>
                  </div>
                </div>
              </div>
            </div>
            
            <!-- Sağ Panel - Ayarlar -->
            <div>
              <form @submit.prevent="savePanelSettings" class="space-y-6">
                <!-- Header Görünümü -->
                <div class="bg-white p-4 rounded-lg border border-gray-200">
                  <h5 class="text-sm font-medium text-gray-700 mb-3 flex items-center">
                    <i class="fas fa-window-maximize mr-2 text-primary"></i> Header Görünümü
                  </h5>
                  
                  <div class="space-y-3">
                    <div class="flex items-center">
                      <input 
                        id="logo-option" 
                        type="radio" 
                        name="header-display" 
                        :value="true" 
                        v-model="panelForm.showLogo"
                        class="h-4 w-4 text-primary border-gray-300 focus:ring-primary"
                      />
                      <label for="logo-option" class="ml-3 block text-sm font-medium text-gray-700">
                        Logo göster
                      </label>
                    </div>
                    
                    <div class="flex items-center">
                      <input 
                        id="text-option" 
                        type="radio" 
                        name="header-display" 
                        :value="false" 
                        v-model="panelForm.showLogo"
                        class="h-4 w-4 text-primary border-gray-300 focus:ring-primary"
                      />
                      <label for="text-option" class="ml-3 block text-sm font-medium text-gray-700">
                        Restoran adını yazı olarak göster
                      </label>
                    </div>
                  </div>
                </div>
                
                <!-- Alt Metin Ayarı -->
                <div class="bg-white p-4 rounded-lg border border-gray-200">
                  <h5 class="text-sm font-medium text-gray-700 mb-3 flex items-center">
                    <i class="fas fa-text-height mr-2 text-primary"></i> Alt Metin Ayarı
                  </h5>
                  
                  <div class="space-y-3">
                    <div class="flex items-center">
                      <input 
                        id="show-subtext" 
                        type="radio" 
                        name="subtext-display" 
                        :value="true" 
                        v-model="panelForm.showSubtext"
                        class="h-4 w-4 text-primary border-gray-300 focus:ring-primary"
                      />
                      <label for="show-subtext" class="ml-3 block text-sm font-medium text-gray-700">
                        Alt metin göster
                      </label>
                    </div>
                    
                    <div class="flex items-center">
                      <input 
                        id="hide-subtext" 
                        type="radio" 
                        name="subtext-display" 
                        :value="false" 
                        v-model="panelForm.showSubtext"
                        class="h-4 w-4 text-primary border-gray-300 focus:ring-primary"
                      />
                      <label for="hide-subtext" class="ml-3 block text-sm font-medium text-gray-700">
                        Alt metni gizle
                      </label>
                    </div>
                    
                    <div class="mt-3" v-if="panelForm.showSubtext">
                      <label class="block text-sm font-medium text-gray-700">Alt Metin İçeriği</label>
                      <div class="mt-1 relative rounded-md shadow-sm">
                        <div class="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
                          <i class="fas fa-quote-left text-gray-400"></i>
                        </div>
                        <input 
                          v-model="panelForm.subtextContent" 
                          type="text" 
                          class="pl-10 block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-primary focus:border-primary" 
                          placeholder="Restoran Yönetim Paneli"
                        />
                      </div>
                    </div>
                  </div>
                </div>
                
                <!-- Renk Tema Seçimi -->
                <div class="bg-white p-4 rounded-lg border border-gray-200">
                  <h5 class="text-sm font-medium text-gray-700 mb-3 flex items-center">
                    <i class="fas fa-palette mr-2 text-primary"></i> Tema Rengi
                  </h5>
                  
                  <div class="grid grid-cols-5 gap-2">
                    <div v-for="(color, index) in colorOptions" :key="index" 
                      class="w-full aspect-square rounded-full p-1 cursor-pointer border-2"
                      :class="panelForm.themeColor === color.value ? `border-${color.value} ring-2 ring-${color.value}/50` : 'border-transparent'"
                      @click="panelForm.themeColor = color.value"
                    >
                      <div class="w-full h-full rounded-full" :class="`bg-${color.value}`"></div>
                    </div>
                  </div>
                  
                  <p class="mt-2 text-xs text-gray-500">
                    Not: Tema rengini değiştirmek için yönetici yetkileri gereklidir. Bu ayar tüm sistem genelinde görünümü etkiler.
                  </p>
                </div>
                
                <!-- Diğer Tercihler -->
                <div class="bg-white p-4 rounded-lg border border-gray-200">
                  <h5 class="text-sm font-medium text-gray-700 mb-3 flex items-center">
                    <i class="fas fa-sliders-h mr-2 text-primary"></i> Diğer Tercihler
                  </h5>
                  
                  <div class="space-y-3">
                    <div class="flex items-center">
                      <input 
                        id="compact-view" 
                        type="checkbox" 
                        v-model="panelForm.compactMode"
                        class="h-4 w-4 text-primary border-gray-300 rounded focus:ring-primary"
                      />
                      <label for="compact-view" class="ml-3 block text-sm font-medium text-gray-700">
                        Kompakt görünüm modu
                      </label>
                    </div>
                    
                    <div class="flex items-center">
                      <input 
                        id="show-notifications" 
                        type="checkbox" 
                        v-model="panelForm.notifications"
                        class="h-4 w-4 text-primary border-gray-300 rounded focus:ring-primary"
                      />
                      <label for="show-notifications" class="ml-3 block text-sm font-medium text-gray-700">
                        Bildirimler için ses çal
                      </label>
                    </div>
                    
                    <div class="flex items-center">
                      <input 
                        id="auto-refresh" 
                        type="checkbox" 
                        v-model="panelForm.autoRefresh"
                        class="h-4 w-4 text-primary border-gray-300 rounded focus:ring-primary"
                      />
                      <label for="auto-refresh" class="ml-3 block text-sm font-medium text-gray-700">
                        Modülleri otomatik yenile (60sn)
                      </label>
                    </div>
                  </div>
                </div>
                
                <div class="flex justify-end space-x-2">
                  <button 
                    type="button" 
                    @click="resetToDefaults" 
                    class="px-4 py-2 border border-gray-300 rounded-md text-sm font-medium text-gray-700 hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-gray-500"
                  >
                    <i class="fas fa-undo mr-1"></i> Varsayılana Sıfırla
                  </button>
                  <button 
                    v-if="isAdmin" 
                    type="submit" 
                    class="px-4 py-2 border border-transparent rounded-md shadow-sm text-sm font-medium text-white bg-primary hover:bg-primary-dark focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-primary"
                  >
                    <i class="fas fa-save mr-1"></i> Ayarları Kaydet
                  </button>
                </div>
              </form>
            </div>
          </div>
        </div>
      </div>
    </div>
    
    <!-- Menü Öğesi Ekle/Düzenle Modalı -->
    <div v-if="showMenuModal" class="fixed inset-0 bg-gray-600 bg-opacity-50 overflow-y-auto h-full w-full z-[100]">
      <div class="relative top-20 mx-auto p-5 border w-[600px] shadow-lg rounded-md bg-white z-[101]">
        <div class="mt-3">
          <h3 class="text-lg font-medium leading-6 text-gray-900 mb-4 flex items-center">
            <i class="fas fa-utensils mr-2 text-primary"></i>
            {{ selectedMenuItem?.id ? 'Menü Öğesi Düzenle' : 'Yeni Menü Öğesi Ekle' }}
          </h3>
          
          <form @submit.prevent="saveMenuItem" class="space-y-4">
            <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
              <div>
                <label class="block text-sm font-medium text-gray-700">Ürün Adı</label>
                <input v-model="menuItemForm.name" type="text" required class="mt-1 block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-primary focus:border-primary" />
              </div>
              
              <div>
                <label class="block text-sm font-medium text-gray-700">Kategori</label>
                <select v-model="menuItemForm.category" required class="mt-1 block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-primary focus:border-primary">
                  <option value="Ana Yemekler">Ana Yemekler</option>
                  <option value="Tatlılar">Tatlılar</option>
                  <option value="İçecekler">İçecekler</option>
                  <option value="Mezeler">Mezeler</option>
                  <option value="Salatalar">Salatalar</option>
                </select>
              </div>
            </div>
            
            <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
              <div>
                <label class="block text-sm font-medium text-gray-700">Fiyat (₺)</label>
                <div class="mt-1 relative rounded-md shadow-sm">
                  <div class="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
                    <i class="fas fa-lira-sign text-gray-400"></i>
                  </div>
                  <input 
                    v-model.number="menuItemForm.price" 
                    type="number" 
                    min="0" 
                    step="0.01" 
                    required 
                    class="pl-10 block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-primary focus:border-primary" 
                  />
                </div>
              </div>
              
              <div>
                <label class="block text-sm font-medium text-gray-700">Hazırlanma Süresi (dk)</label>
                <div class="mt-1 relative rounded-md shadow-sm">
                  <div class="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
                    <i class="fas fa-clock text-gray-400"></i>
                  </div>
                  <input 
                    v-model.number="menuItemForm.prep_time" 
                    type="number" 
                    min="1" 
                    max="180" 
                    class="pl-10 block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-primary focus:border-primary" 
                    placeholder="10"
                  />
                </div>
              </div>
            </div>
            
            <div>
              <label class="block text-sm font-medium text-gray-700">Ürün Görseli URL</label>
              <div class="mt-1 relative rounded-md shadow-sm">
                <div class="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
                  <i class="fas fa-image text-gray-400"></i>
                </div>
                <input 
                  v-model="menuItemForm.image_url" 
                  type="text" 
                  class="pl-10 block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-primary focus:border-primary" 
                  placeholder="https://example.com/images/urun.jpg"
                />
              </div>
              <p class="mt-1 text-xs text-gray-500">Daha sonra resim yükleme özelliği eklenecektir. Şimdilik görsel URL'si girebilirsiniz.</p>
            </div>
            
            <div>
              <label class="block text-sm font-medium text-gray-700">Açıklama</label>
              <textarea 
                v-model="menuItemForm.description" 
                rows="2" 
                class="mt-1 block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-primary focus:border-primary"
                placeholder="Ürün hakkında kısa bir açıklama yazın"
              ></textarea>
            </div>
            
            <!-- Opsiyonlar / Ekstralar -->
            <div>
              <div class="flex justify-between items-center">
                <label class="block text-sm font-medium text-gray-700">Opsiyonlar / Ekstralar</label>
                <button 
                  type="button" 
                  @click="addMenuItemOption" 
                  class="px-2 py-1 text-xs bg-gray-100 text-gray-700 rounded hover:bg-gray-200 flex items-center"
                >
                  <i class="fas fa-plus mr-1"></i> Yeni Ekle
                </button>
              </div>
              
              <div class="space-y-2 mt-2">
                <div 
                  v-for="(option, index) in menuItemForm.options" 
                  :key="index"
                  class="flex items-center space-x-2 p-2 bg-gray-50 rounded-md"
                >
                  <div class="flex-1">
                    <input 
                      v-model="option.name" 
                      type="text" 
                      class="block w-full px-3 py-1.5 text-sm border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-primary focus:border-primary" 
                      placeholder="Opsiyon ismi (örn: Mantarlı)"
                    />
                  </div>
                  <div class="w-24">
                    <div class="relative rounded-md shadow-sm">
                      <div class="absolute inset-y-0 left-0 pl-2 flex items-center pointer-events-none">
                        <span class="text-gray-500 sm:text-xs">₺</span>
                      </div>
                      <input 
                        v-model.number="option.price" 
                        type="number" 
                        min="0" 
                        step="0.5" 
                        class="pl-6 block w-full border border-gray-300 py-1.5 text-sm rounded-md shadow-sm focus:outline-none focus:ring-primary focus:border-primary" 
                        placeholder="Fiyat"
                      />
                    </div>
                  </div>
                  <button 
                    type="button" 
                    @click="removeMenuItemOption(index)" 
                    class="text-red-500 hover:text-red-700 focus:outline-none"
                  >
                    <i class="fas fa-times"></i>
                  </button>
                </div>
                
                <div v-if="menuItemForm.options.length === 0" class="text-xs text-gray-500 italic p-2">
                  Ürün için ek seçenekler eklemek için "Yeni Ekle" butonuna tıklayın (Örnek: Mantarlı, Kızarmış Soğanlı, vb.)
                </div>
              </div>
            </div>
            
            <div class="flex justify-end space-x-2 pt-4">
              <button type="button" @click="showMenuModal = false" class="px-4 py-2 border border-gray-300 rounded-md text-sm font-medium text-gray-700 hover:bg-gray-50">
                İptal
              </button>
              <button type="submit" class="px-4 py-2 border border-transparent rounded-md shadow-sm text-sm font-medium text-white bg-primary hover:bg-primary-dark focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-primary flex items-center">
                <i class="fas fa-save mr-1"></i>
                {{ selectedMenuItem?.id ? 'Güncelle' : 'Kaydet' }}
              </button>
            </div>
          </form>
        </div>
      </div>
    </div>
    
    <!-- Menü Öğesi Modalı -->
    <div v-if="showingMenuItemForm" class="fixed inset-0 z-50 flex items-center justify-center bg-black bg-opacity-50">
      <div class="bg-white rounded-lg w-full max-w-2xl max-h-[90vh] overflow-auto">
        <div class="flex justify-between items-center p-4 border-b">
          <h2 class="text-xl font-bold">{{ menuItemForm.id ? 'Menü Öğesini Düzenle' : 'Yeni Menü Öğesi Ekle' }}</h2>
          <button @click="showingMenuItemForm = false" class="text-gray-500 hover:text-gray-700">
            <i class="fas fa-times"></i>
          </button>
        </div>
        
        <div class="p-4 grid grid-cols-1 md:grid-cols-2 gap-6">
          <!-- Sol Kolonda Form Alanları -->
          <div class="space-y-4">
            <div>
              <label class="block text-gray-700 text-sm font-medium mb-1">Ürün Adı <span class="text-red-500">*</span></label>
              <input v-model="menuItemForm.name" class="w-full border border-gray-300 rounded px-3 py-2 focus:outline-none focus:ring-2 focus:ring-primary" placeholder="Ürün adını girin" />
            </div>
            
            <div>
              <label class="block text-gray-700 text-sm font-medium mb-1">Kategori <span class="text-red-500">*</span></label>
              <div class="relative">
                <select v-model="menuItemForm.category" class="w-full appearance-none border border-gray-300 rounded px-3 py-2 focus:outline-none focus:ring-2 focus:ring-primary pr-8">
                  <option v-for="cat in availableCategories" :key="cat" :value="cat">{{ cat }}</option>
                  <option value="custom">Özel Kategori</option>
                </select>
                <div class="absolute inset-y-0 right-0 flex items-center px-2 pointer-events-none">
                  <i class="fas fa-chevron-down text-gray-400"></i>
                </div>
              </div>
              <input 
                v-if="menuItemForm.category === 'custom'" 
                v-model="customCategory" 
                class="w-full mt-2 border border-gray-300 rounded px-3 py-2 focus:outline-none focus:ring-2 focus:ring-primary" 
                placeholder="Özel kategori adını girin"
              />
            </div>
            
            <div>
              <label class="block text-gray-700 text-sm font-medium mb-1">Fiyat (₺) <span class="text-red-500">*</span></label>
              <div class="relative">
                <input type="number" v-model="menuItemForm.price" class="w-full border border-gray-300 rounded px-3 py-2 focus:outline-none focus:ring-2 focus:ring-primary pl-7" placeholder="0.00" step="0.01" min="0" />
                <div class="absolute inset-y-0 left-0 flex items-center pl-3 pointer-events-none">
                  <span class="text-gray-500">₺</span>
                </div>
              </div>
            </div>
            
            <div>
              <label class="block text-gray-700 text-sm font-medium mb-1">Hazırlanma Süresi (dakika)</label>
              <div class="relative">
                <input type="number" v-model="menuItemForm.prep_time" class="w-full border border-gray-300 rounded px-3 py-2 focus:outline-none focus:ring-2 focus:ring-primary" placeholder="15" min="1" max="180" />
              </div>
            </div>
            
            <div>
              <label class="block text-gray-700 text-sm font-medium mb-1">Ürün Görseli</label>
              <div class="space-y-2">
                <!-- Görsel Önizleme -->
                <div v-if="menuItemForm.image_url || imagePreview" class="w-full h-32 border border-gray-300 rounded overflow-hidden mb-2">
                  <img :src="imagePreview || menuItemForm.image_url" alt="Ürün görseli" class="w-full h-full object-cover" />
                </div>
                
                <!-- Görsel Yükleme -->
                <div class="flex items-center space-x-2">
                  <label class="flex-1 cursor-pointer bg-gray-100 hover:bg-gray-200 text-gray-700 rounded px-3 py-2 border border-gray-300 text-center">
                    <span class="flex items-center justify-center">
                      <i class="fas fa-upload mr-2"></i> Görsel Yükle
                    </span>
                    <input 
                      type="file" 
                      @change="handleImageUpload" 
                      accept="image/*" 
                      class="hidden" 
                    />
                  </label>
                  
                  <button 
                    v-if="menuItemForm.image_url || imagePreview" 
                    @click="removeImage" 
                    type="button"
                    class="px-3 py-2 bg-red-100 text-red-700 rounded hover:bg-red-200"
                  >
                    <i class="fas fa-times"></i>
                  </button>
                </div>
                
                <div v-if="imageUploadError" class="text-red-500 text-xs">{{ imageUploadError }}</div>
                <div v-if="isImageUploading" class="text-blue-500 text-xs flex items-center">
                  <i class="fas fa-spinner fa-spin mr-1"></i> Görsel yükleniyor...
                </div>
              </div>
            </div>
          </div>
          
          <!-- Sağ Kolonda Form Alanları -->
          <div class="space-y-4">
            <div>
              <label class="block text-gray-700 text-sm font-medium mb-1">Açıklama</label>
              <textarea v-model="menuItemForm.description" class="w-full border border-gray-300 rounded px-3 py-2 focus:outline-none focus:ring-2 focus:ring-primary" placeholder="Ürün açıklaması" rows="3"></textarea>
            </div>
            
            <div>
              <div class="flex justify-between items-center mb-2">
                <label class="block text-gray-700 text-sm font-medium">Opsiyonlar / Ekstralar</label>
                <button 
                  @click="addMenuItemOption" 
                  type="button" 
                  class="inline-flex items-center text-primary hover:text-primary-dark text-sm"
                >
                  <i class="fas fa-plus-circle mr-1"></i> Yeni Ekle
                </button>
              </div>
              
              <div v-if="menuItemForm.options && menuItemForm.options.length === 0" class="text-center py-3 border border-dashed border-gray-300 rounded text-gray-500 text-sm">
                Henüz opsiyon eklenmedi
              </div>
              
              <div v-for="(option, index) in menuItemForm.options" :key="index" class="border border-gray-200 rounded p-3 mb-2 relative">
                <button 
                  @click="removeMenuItemOption(index)" 
                  type="button" 
                  class="absolute top-2 right-2 text-red-500 hover:text-red-700"
                >
                  <i class="fas fa-times"></i>
                </button>
                
                <div class="grid grid-cols-2 gap-2">
                  <div>
                    <label class="block text-gray-700 text-xs font-medium mb-1">Opsiyon Adı</label>
                    <input v-model="option.name" class="w-full border border-gray-300 rounded px-2 py-1 text-sm focus:outline-none focus:ring-1 focus:ring-primary" placeholder="Örn: Mantarlı" />
                  </div>
                  <div>
                    <label class="block text-gray-700 text-xs font-medium mb-1">Ek Fiyat (₺)</label>
                    <div class="relative">
                      <input type="number" v-model="option.price" class="w-full border border-gray-300 rounded px-2 py-1 text-sm focus:outline-none focus:ring-1 focus:ring-primary pl-6" placeholder="0.00" step="0.01" min="0" />
                      <div class="absolute inset-y-0 left-0 flex items-center pl-2 pointer-events-none">
                        <span class="text-gray-500 text-xs">₺</span>
                      </div>
                    </div>
                  </div>
                </div>
              </div>
            </div>
          </div>
        </div>
        
        <div class="flex justify-end p-4 border-t space-x-3">
          <button @click="showingMenuItemForm = false" class="px-4 py-2 border border-gray-300 rounded text-gray-700 hover:bg-gray-50">
            İptal
          </button>
          <button @click="saveMenuItem" class="px-4 py-2 bg-primary text-white rounded hover:bg-primary-dark flex items-center">
            <i class="fas fa-save mr-2"></i> Kaydet
          </button>
        </div>
      </div>
    </div>

    <!-- Kategori Yönetim Modalı -->
    <div v-if="showingCategoryModal" class="fixed inset-0 z-50 flex items-center justify-center bg-black bg-opacity-50">
      <div class="bg-white rounded-lg w-full max-w-md max-h-[90vh] overflow-auto">
        <div class="flex justify-between items-center p-4 border-b">
          <h2 class="text-xl font-bold">Kategori Yönetimi</h2>
          <button @click="showingCategoryModal = false" class="text-gray-500 hover:text-gray-700">
            <i class="fas fa-times"></i>
          </button>
        </div>
        
        <div class="p-4">
          <div class="mb-4">
            <label class="block text-gray-700 text-sm font-medium mb-1">Yeni Kategori</label>
            <div class="flex items-center space-x-2">
              <input 
                v-model="newCategory" 
                class="flex-1 border border-gray-300 rounded px-3 py-2 focus:outline-none focus:ring-2 focus:ring-primary" 
                placeholder="Kategori adını girin" 
              />
              <button 
                @click="addCategory" 
                class="px-4 py-2 bg-primary text-white rounded hover:bg-primary-dark flex items-center"
                :disabled="!newCategory.trim()"
              >
                <i class="fas fa-plus mr-1"></i> Ekle
              </button>
            </div>
          </div>
          
          <div class="mt-4">
            <h3 class="font-medium text-gray-700 mb-2">Mevcut Kategoriler</h3>
            <div v-if="availableCategories.length === 0" class="text-center py-3 border border-dashed border-gray-300 rounded text-gray-500 text-sm">
              Henüz kategori eklenmedi
            </div>
            
            <div v-else class="space-y-2 max-h-64 overflow-y-auto">
              <div 
                v-for="(category, index) in availableCategories" 
                :key="index"
                class="flex items-center justify-between p-2 bg-gray-50 rounded border border-gray-200"
              >
                <span class="text-gray-700">{{ category }}</span>
                <div class="flex items-center space-x-1">
                  <button 
                    @click="editCategory(category)" 
                    class="text-blue-500 hover:text-blue-700 p-1"
                  >
                    <i class="fas fa-edit"></i>
                  </button>
                  <button 
                    @click="deleteCategory(category)" 
                    class="text-red-500 hover:text-red-700 p-1"
                    :disabled="isCategoryInUse(category)"
                    :class="{'opacity-50 cursor-not-allowed': isCategoryInUse(category)}"
                  >
                    <i class="fas fa-trash-alt"></i>
                  </button>
                </div>
              </div>
            </div>
            
            <div v-if="editingCategory" class="mt-4 p-3 border border-blue-200 bg-blue-50 rounded">
              <label class="block text-gray-700 text-sm font-medium mb-1">Kategori Düzenle</label>
              <div class="flex items-center space-x-2">
                <input 
                  v-model="editedCategoryName" 
                  class="flex-1 border border-gray-300 rounded px-3 py-2 focus:outline-none focus:ring-2 focus:ring-primary" 
                  placeholder="Yeni kategori adını girin" 
                />
                <button 
                  @click="updateCategory" 
                  class="px-3 py-1.5 bg-blue-500 text-white rounded hover:bg-blue-600 text-sm"
                  :disabled="!editedCategoryName.trim()"
                >
                  <i class="fas fa-check mr-1"></i> Kaydet
                </button>
                <button 
                  @click="cancelCategoryEdit" 
                  class="px-3 py-1.5 bg-gray-300 text-gray-700 rounded hover:bg-gray-400 text-sm"
                >
                  <i class="fas fa-times mr-1"></i> İptal
                </button>
              </div>
            </div>
          </div>
        </div>
        
        <div class="flex justify-end p-4 border-t">
          <button @click="showingCategoryModal = false" class="px-4 py-2 bg-gray-100 text-gray-700 rounded hover:bg-gray-200">
            Kapat
          </button>
        </div>
      </div>
    </div>
  </div>
</template>

<script setup lang="ts">
import { ref, computed, onMounted, watch } from 'vue'
import supabase from '../../services/supabase'
import { usePermissions } from '../../composables/usePermissions'

// Props
const props = defineProps({
  restaurantId: {
    type: Number,
    default: () => parseInt(localStorage.getItem('restaurantId') || '0', 10)
  }
})

// Tabs
const activeTab = ref('general')
const tabs = computed(() => [
  { id: 'general', name: 'Genel Ayarlar' },
  { id: 'menu', name: 'Menü Yönetimi' },
  { id: 'reports', name: 'Raporlar' },
  ...(isAdmin.value ? [{ id: 'panel', name: 'Panel Ayarları' }] : [])
])

// Restaurant Form
const restaurantForm = ref({
  name: '',
  slug: '',
  address: '',
  phone: '',
  email: '',
  tax_number: ''
})

// Panel Ayarları Form
const panelForm = ref({
  showLogo: true,
  showSubtext: true,
  subtextContent: '',
  themeColor: 'primary',
  compactMode: false,
  notifications: true,
  autoRefresh: true
})

// Menu Items
const menuItems = ref<any[]>([])
const menuSearch = ref('')
const showMenuModal = ref(false)
const selectedMenuItem = ref<any>(null)
const selectedCategory = ref('')
const menuSort = ref('name')

// Menü öğesi formu
const menuItemForm = ref({
  id: null,
  name: '',
  category: 'Ana Yemekler',
  price: 0,
  description: '',
  restaurant_id: props.restaurantId,
  prep_time: 10,
  image_url: '',
  options: []
})

// Raporlar
const reportPeriod = ref('week')
const dailySales = ref(2450.75)
const weeklySales = ref(14875.50)
const monthlySales = ref(63240.25)
const topSellingItems = ref([
  { name: 'Karışık Izgara', category: 'Ana Yemekler', quantity: 127, total: 16510 },
  { name: 'Künefe', category: 'Tatlılar', quantity: 98, total: 3920 },
  { name: 'Türk Kahvesi', category: 'İçecekler', quantity: 94, total: 2350 },
  { name: 'Tavuk Şiş', category: 'Ana Yemekler', quantity: 87, total: 10440 },
  { name: 'Mevsim Salata', category: 'Salatalar', quantity: 78, total: 3120 }
])

// Kullanıcı yönetimi için gerekli state ve fonksiyonlar
const userSearch = ref('')
const users = ref<any[]>([])
const isUserModalOpen = ref(false)
const userFormError = ref<string | null>(null)

// Kullanıcı formu
const userForm = ref<any>({
  fullname: '',
  email: '',
  password: '',
  role: 'waiter',
  active: true
})

// Filtreleme
const filteredMenuItems = computed(() => {
  let items = [...menuItems.value]
  
  // Metin araması
  if (menuSearch.value) {
    const search = menuSearch.value.toLowerCase()
    items = items.filter(item => 
      item.name.toLowerCase().includes(search) ||
      item.category.toLowerCase().includes(search) ||
      (item.description && item.description.toLowerCase().includes(search))
    )
  }
  
  // Kategori filtresi
  if (selectedCategory.value) {
    items = items.filter(item => item.category === selectedCategory.value)
  }
  
  // Sıralama
  switch (menuSort.value) {
    case 'name':
      items.sort((a, b) => a.name.localeCompare(b.name))
      break
    case 'name-desc':
      items.sort((a, b) => b.name.localeCompare(a.name))
      break
    case 'price':
      items.sort((a, b) => b.price - a.price)
      break
    case 'price-asc':
      items.sort((a, b) => a.price - b.price)
      break
    case 'prep-time':
      items.sort((a, b) => (a.prep_time || 10) - (b.prep_time || 10))
      break
  }
  
  return items
})

// Kullanıcıları filtrele
const filteredUsers = computed(() => {
  if (!userSearch.value) return users.value
  const searchTerm = userSearch.value.toLowerCase()
  return users.value.filter(user => 
    user.fullname.toLowerCase().includes(searchTerm) || 
    user.email.toLowerCase().includes(searchTerm) ||
    getRoleName(user.role).toLowerCase().includes(searchTerm)
  )
})

// Rol adını göster
const getRoleName = (role: string) => {
  const roleMap: {[key: string]: string} = {
    'admin': 'Yönetici',
    'manager': 'Müdür',
    'cashier': 'Kasiyer',
    'waiter': 'Garson',
    'chef': 'Şef',
    'cook': 'Aşçı',
    'host': 'Karşılama Görevlisi'
  }
  return roleMap[role] || role
}

// Restoran bilgilerini yükle
const loadRestaurantInfo = async () => {
  if (!props.restaurantId) return
  
  try {
    const { data, error } = await supabase
      .from('restaurants')
      .select('*')
      .eq('id', props.restaurantId)
      .single()
    
    if (error) throw error
    
    if (data) {
      restaurantForm.value = {
        name: data.name || '',
        slug: data.slug || '',
        address: data.address || '',
        phone: data.phone || '',
        email: data.email || '',
        tax_number: data.tax_number || ''
      }
    }
  } catch (err) {
    console.error('Restoran bilgileri yüklenirken hata:', err)
  }
}

// Menü öğelerini yükle - geliştirilmiş
const loadMenuItems = async () => {
  if (!props.restaurantId) return
  
  try {
    const { data, error } = await supabase
      .from('menu_items')
      .select('*')
      .eq('restaurant_id', props.restaurantId)
      .order('category')
    
    if (error) throw error
    
    if (data) {
      menuItems.value = data
    } else {
      // Test verisi yükle
      menuItems.value = [
        { 
          id: 1, 
          name: 'Tavuk Şiş', 
          price: 120, 
          category: 'Ana Yemekler', 
          description: 'Marine edilmiş tavuk', 
          restaurant_id: props.restaurantId,
          prep_time: 15,
          image_url: 'https://images.unsplash.com/photo-1610057099431-d73a1c9d2f2f',
          options: [
            { name: 'Acılı', price: 0 },
            { name: 'Mantarlı', price: 5 },
            { name: 'Ekstra Pirinç Pilavı', price: 15 }
          ]
        },
        { 
          id: 2, 
          name: 'Köfte', 
          price: 130, 
          category: 'Ana Yemekler', 
          description: 'El yapımı köfte', 
          restaurant_id: props.restaurantId,
          prep_time: 12,
          image_url: 'https://images.unsplash.com/photo-1529042410759-befb1204b468',
          options: [
            { name: 'Kaşarlı', price: 10 },
            { name: 'Kızarmış Soğanlı', price: 5 }
          ]
        },
        { 
          id: 3, 
          name: 'Türk Kahvesi', 
          price: 25, 
          category: 'İçecekler', 
          description: 'Özenle pişirilmiş', 
          restaurant_id: props.restaurantId,
          prep_time: 5,
          image_url: 'https://images.unsplash.com/photo-1541167760496-1628856ab772',
          options: [
            { name: 'Sade', price: 0 },
            { name: 'Orta', price: 0 },
            { name: 'Şekerli', price: 0 }
          ]
        },
        { 
          id: 4, 
          name: 'Sütlaç', 
          price: 45, 
          category: 'Tatlılar', 
          description: 'Geleneksel sütlaç', 
          restaurant_id: props.restaurantId,
          prep_time: 8,
          image_url: 'https://images.unsplash.com/photo-1621303837174-89787a7d4729',
          options: [
            { name: 'Tarçınlı', price: 0 },
            { name: 'Fındıklı', price: 5 }
          ]
        }
      ]
    }
  } catch (err) {
    console.error('Menü öğeleri yüklenirken hata:', err)
  }
}

// Restoran bilgilerini kaydet
const saveRestaurantInfo = async () => {
  if (!canWrite(adminModuleId)) {
    alert('Bu işlemi gerçekleştirmek için yeterli yetkiniz yok')
    return
  }
  
  if (!props.restaurantId) return
  
  try {
    const { error } = await supabase
      .from('restaurants')
      .update({
        name: restaurantForm.value.name,
        slug: restaurantForm.value.slug,
        address: restaurantForm.value.address,
        phone: restaurantForm.value.phone,
        email: restaurantForm.value.email,
        tax_number: restaurantForm.value.tax_number
      })
      .eq('id', props.restaurantId)
    
    if (error) throw error
    
    alert('Restoran bilgileri başarıyla güncellendi')
  } catch (err) {
    console.error('Restoran bilgileri kaydedilirken hata:', err)
    alert('Bilgiler kaydedilirken bir hata oluştu')
  }
}

// Menü öğesi modalını göster
const showMenuItemModal = (item: any) => {
  selectedMenuItem.value = item
  
  if (item) {
    menuItemForm.value = {
      name: item.name,
      category: item.category,
      price: item.price,
      description: item.description || '',
      restaurant_id: props.restaurantId,
      prep_time: item.prep_time || 10,
      image_url: item.image_url || '',
      options: item.options ? [...item.options] : []
    }
  } else {
    menuItemForm.value = {
      name: '',
      category: 'Ana Yemekler',
      price: 0,
      description: '',
      restaurant_id: props.restaurantId,
      prep_time: 10,
      image_url: '',
      options: []
    }
  }
  
  showMenuModal.value = true
}

// Menü öğesi opsiyonu ekle
const addMenuItemOption = () => {
  menuItemForm.value.options.push({
    name: '',
    price: 0
  })
}

// Menü öğesi opsiyonu kaldır
const removeMenuItemOption = (index: number) => {
  menuItemForm.value.options.splice(index, 1)
}

// Menü öğesi kaydet
const saveMenuItem = async () => {
  if (!canWrite(adminModuleId)) {
    alert('Bu işlemi gerçekleştirmek için yeterli yetkiniz yok')
    return
  }
  
  try {
    // Opsiyonlar için kontrol
    menuItemForm.value.options = menuItemForm.value.options.filter(option => option.name.trim() !== '')
    
    if (selectedMenuItem.value?.id) {
      // Güncelle
      const { error } = await supabase
        .from('menu_items')
        .update({
          name: menuItemForm.value.name,
          category: menuItemForm.value.category,
          price: menuItemForm.value.price,
          description: menuItemForm.value.description,
          prep_time: menuItemForm.value.prep_time,
          image_url: menuItemForm.value.image_url,
          options: menuItemForm.value.options
        })
        .eq('id', selectedMenuItem.value.id)
      
      if (error) throw error
    } else {
      // Yeni ekle
      const { error } = await supabase
        .from('menu_items')
        .insert([menuItemForm.value])
      
      if (error) throw error
    }
    
    // Modalı kapat ve listeyi yenile
    showMenuModal.value = false
    loadMenuItems()
  } catch (err) {
    console.error('Menü öğesi kaydedilirken hata:', err)
    alert('Menü öğesi kaydedilirken bir hata oluştu')
  }
}

// Menü öğesi sil
const deleteMenuItem = async (id: number) => {
  if (!canWrite(adminModuleId)) {
    alert('Bu işlemi gerçekleştirmek için yeterli yetkiniz yok')
    return
  }
  
  if (!confirm('Bu menü öğesini silmek istediğinize emin misiniz?')) return
  
  try {
    const { error } = await supabase
      .from('menu_items')
      .delete()
      .eq('id', id)
    
    if (error) throw error
    
    // Listeyi yenile
    loadMenuItems()
  } catch (err) {
    console.error('Menü öğesi silinirken hata:', err)
    alert('Menü öğesi silinirken bir hata oluştu')
  }
}

// Fiyat formatla
const formatPrice = (price: number) => {
  return price.toFixed(2)
}

// Renk seçenekleri
const colorOptions = [
  { value: 'primary', label: 'Varsayılan' },
  { value: 'blue-600', label: 'Mavi' },
  { value: 'green-600', label: 'Yeşil' },
  { value: 'purple-600', label: 'Mor' },
  { value: 'red-600', label: 'Kırmızı' }
]

// Son kayıt zamanı
const lastSettingsSaved = ref('')

// Panel ayarlarını kaydet - genişletilmiş
const savePanelSettings = async () => {
  if (!isAdmin.value) {
    alert('Panel ayarlarını değiştirmek için yönetici yetkisine sahip olmalısınız')
    return
  }
  
  try {
    // Panel ayarlarını localStorage'a kaydet
    localStorage.setItem('panelSettings', JSON.stringify({
      showLogo: panelForm.value.showLogo,
      showSubtext: panelForm.value.showSubtext,
      subtextContent: panelForm.value.subtextContent,
      themeColor: panelForm.value.themeColor,
      compactMode: panelForm.value.compactMode,
      notifications: panelForm.value.notifications,
      autoRefresh: panelForm.value.autoRefresh
    }))
    
    // Kayıt zamanını güncelle
    lastSettingsSaved.value = new Date().toLocaleString()
    
    alert('Panel ayarları başarıyla kaydedildi.')
  } catch (error) {
    console.error('Panel ayarları kaydedilirken hata:', error)
    alert('Panel ayarları kaydedilirken bir hata oluştu.')
  }
}

// Panel ayarlarını varsayılana sıfırla
const resetToDefaults = () => {
  if (confirm('Panel ayarlarını varsayılan değerlere sıfırlamak istediğinize emin misiniz?')) {
    panelForm.value = {
      showLogo: true,
      showSubtext: true,
      subtextContent: '',
      themeColor: 'primary',
      compactMode: false,
      notifications: true,
      autoRefresh: true
    }
  }
}

// Rapor sayfası için değişkenler
const chartView = ref('week')
const isChartLoading = ref(false)
const receiptCount = ref(87)
const customerCount = ref(156)
const averageOrder = ref(0)

// Son güncelleme zamanı için değişken ekle
const lastRestaurantUpdateTime = ref('')

// Ortalama sipariş tutarını hesapla
watch(dailySales, (newValue) => {
  if (receiptCount.value > 0) {
    averageOrder.value = newValue / receiptCount.value
  }
})

// Grafik verileri yüklenirken yükleme göstergesi göster
watch(reportPeriod, (newValue) => {
  isChartLoading.value = true
  // Simüle edilmiş yükleme süresi
  setTimeout(() => {
    isChartLoading.value = false
  }, 800)
})

// Panel ayarlarını yükle - genişletilmiş
const loadPanelSettings = () => {
  const settings = localStorage.getItem('panelSettings')
  if (settings) {
    try {
      const parsedSettings = JSON.parse(settings)
      panelForm.value.showLogo = parsedSettings.showLogo !== undefined ? parsedSettings.showLogo : true
      panelForm.value.showSubtext = parsedSettings.showSubtext !== undefined ? parsedSettings.showSubtext : true
      panelForm.value.subtextContent = parsedSettings.subtextContent || ''
      panelForm.value.themeColor = parsedSettings.themeColor || 'primary'
      panelForm.value.compactMode = parsedSettings.compactMode !== undefined ? parsedSettings.compactMode : false
      panelForm.value.notifications = parsedSettings.notifications !== undefined ? parsedSettings.notifications : true
      panelForm.value.autoRefresh = parsedSettings.autoRefresh !== undefined ? parsedSettings.autoRefresh : true
      
      // Son kayıt zamanını al
      const savedTime = localStorage.getItem('panelSettingsSavedTime')
      if (savedTime) {
        lastSettingsSaved.value = savedTime
      }
    } catch (e) {
      console.error('Panel ayarları yüklenemedi:', e)
    }
  }
}

// Kullanıcı modülü göster
const showUserModal = (user: any) => {
  if (user) {
    // Düzenleme - mevcut verileri forma yükle
    userForm.value = { ...user, password: '' } // Şifreyi boş başlat
  } else {
    // Yeni kullanıcı - formu sıfırla
    userForm.value = {
      fullname: '',
      email: '',
      password: '',
      role: 'waiter',
      active: true
    }
  }
  userFormError.value = null
  isUserModalOpen.value = true
}

// Kullanıcı kaydet
const saveUser = async () => {
  if (!isAdmin.value) {
    userFormError.value = 'Kullanıcı yönetimi için yönetici yetkisine sahip olmalısınız'
    return
  }
  
  try {
    userFormError.value = null
    
    // Form doğrulaması
    if (!userForm.value.fullname.trim()) {
      userFormError.value = 'Ad soyad gerekli'
      return
    }
    
    if (!userForm.value.email || !userForm.value.email.includes('@')) {
      userFormError.value = 'Geçerli bir e-posta adresi girin'
      return
    }
    
    if (!userForm.value.id && !userForm.value.password) {
      userFormError.value = 'Yeni kullanıcı için şifre gerekli'
      return
    }
    
    // API'ye gönderilecek veri
    const userData = { ...userForm.value }
    
    if (userForm.value.id) {
      // Güncelleme
      if (!userData.password) delete userData.password // Şifre boşsa, gönderme
      
      // Burada update API çağrısı yapılacak
      // await supabase.from('users').update(userData).eq('id', userData.id)
      
      // Test için direkt güncelleme
      const index = users.value.findIndex(u => u.id === userData.id)
      if (index !== -1) {
        users.value[index] = { ...users.value[index], ...userData }
      }
    } else {
      // Yeni kullanıcı
      // Burada insert API çağrısı yapılacak
      // const { data, error } = await supabase.from('users').insert(userData)
      
      // Test için dummy ID atayalım
      userData.id = Date.now()
      users.value.push(userData)
    }
    
    isUserModalOpen.value = false
  } catch (error) {
    userFormError.value = 'Kullanıcı kaydedilirken hata oluştu'
    console.error('Kullanıcı kaydedilemedi:', error)
  }
}

// Kullanıcı durumunu değiştir (aktif/pasif)
const toggleUserStatus = async (userId: number, status: boolean) => {
  if (!isAdmin.value) {
    error.value = 'Kullanıcı durumunu değiştirmek için yönetici yetkisine sahip olmalısınız'
    return
  }
  
  try {
    // Burada API çağrısı yapılacak
    // await supabase.from('users').update({ active: status }).eq('id', userId)
    
    // Test için direkt güncelleme
    const index = users.value.findIndex(u => u.id === userId)
    if (index !== -1) {
      users.value[index].active = status
    }
  } catch (error) {
    console.error('Kullanıcı durumu değiştirilemedi:', error)
  }
}

// Kullanıcıları yükle
const loadUsers = async () => {
  try {
    loading.value = true
    error.value = null
    
    // Burada API çağrısı yapılacak
    // const { data, error } = await supabase.from('users').select('*')
    
    // Test için örnek kullanıcılar
    users.value = [
      { id: 1, fullname: 'Admin Kullanıcı', email: 'admin@example.com', role: 'admin', active: true },
      { id: 2, fullname: 'Müdür Kullanıcı', email: 'manager@example.com', role: 'manager', active: true },
      { id: 3, fullname: 'Garson Kullanıcı', email: 'waiter@example.com', role: 'waiter', active: true },
      { id: 4, fullname: 'Şef Kullanıcı', email: 'chef@example.com', role: 'chef', active: true },
      { id: 5, fullname: 'Kasiyer Kullanıcı', email: 'cashier@example.com', role: 'cashier', active: false }
    ]
  } catch (err) {
    error.value = 'Kullanıcılar yüklenirken hata oluştu'
    console.error('Kullanıcılar yüklenemedi:', err)
  } finally {
    loading.value = false
  }
}

// Aktif sekme değiştiğinde veri yükle
watch(activeTab, (newTab) => {
  if (newTab === 'users') {
    loadUsers()
  }
})

// Bileşen yüklendiğinde
onMounted(async () => {
  await loadRestaurantInfo()
  await loadMenuItems()
  loadPanelSettings() // Panel ayarlarını yükle
})

// Permissions
const { canWrite, isAdmin } = usePermissions()
const adminModuleId = 'admin'

// Mevcut kategorileri hesapla
const availableCategories = computed(() => {
  const categories = new Set(menuItems.value.map(item => item.category))
  return Array.from(categories).sort()
})

// Ortalama hazırlanma süresi
const averagePrepTime = computed(() => {
  if (menuItems.value.length === 0) return 0
  const totalPrepTime = menuItems.value.reduce((sum, item) => sum + (item.prep_time || 10), 0)
  return Math.round(totalPrepTime / menuItems.value.length)
})

// Kategori ekleme ve düzenleme işlemleri
const newCategory = ref('')
const editingCategory = ref(null)
const editedCategoryName = ref('')

const addCategory = () => {
  if (newCategory.value.trim()) {
    availableCategories.value.push(newCategory.value)
    newCategory.value = ''
  }
}

const editCategory = (category: string) => {
  newCategory.value = category
  editingCategory.value = true
}

const updateCategory = () => {
  if (newCategory.value.trim()) {
    const index = availableCategories.value.indexOf(editedCategoryName.value)
    if (index !== -1) {
      availableCategories.value[index] = newCategory.value
      editedCategoryName.value = ''
      editingCategory.value = false
    }
  }
}

const cancelCategoryEdit = () => {
  newCategory.value = ''
  editingCategory.value = false
}

const isCategoryInUse = (category: string) => {
  return menuItems.value.some(item => item.category === category)
}

// Görsel yükleme işlemleri
const imagePreview = ref('')
const isImageUploading = ref(false)
const imageUploadError = ref('')

// Görsel yükleme fonksiyonu
const handleImageUpload = async (event) => {
  const file = event.target.files[0]
  if (!file) return
  
  // Dosya boyutu kontrolü (max 5MB)
  if (file.size > 5 * 1024 * 1024) {
    imageUploadError.value = 'Görsel boyutu 5MB\'dan küçük olmalıdır'
    return
  }
  
  // Geçerli dosya tipi kontrolü
  if (!['image/jpeg', 'image/png', 'image/gif', 'image/webp'].includes(file.type)) {
    imageUploadError.value = 'Sadece JPEG, PNG, GIF ve WEBP formatları desteklenir'
    return
  }
  
  try {
    isImageUploading.value = true
    imageUploadError.value = ''
    
    // Dosyayı önizleme için URL'e dönüştür
    const reader = new FileReader()
    reader.onload = (e) => {
      imagePreview.value = e.target.result
    }
    reader.readAsDataURL(file)
    
    // Burada AWS entegrasyonu ekleneceği için şimdilik sadece önizleme yapıyoruz
    // İleri aşamada dosya AWS'ye yüklenecek ve dönen URL menuItemForm.image_url'e atanacak
    
    // Simüle edilmiş yükleme işlemi
    await new Promise(resolve => setTimeout(resolve, 1000))
    
    // İşlem başarılı - şimdilik preview URL'i asıl URL olarak atıyoruz
    // AWS entegrasyonu eklendiğinde bu kısım değişecek
    menuItemForm.value.image_url = imagePreview.value
    
  } catch (error) {
    console.error('Görsel yükleme hatası:', error)
    imageUploadError.value = 'Görsel yüklenirken bir hata oluştu'
  } finally {
    isImageUploading.value = false
  }
}

// Görsel kaldırma fonksiyonu
const removeImage = () => {
  menuItemForm.value.image_url = ''
  imagePreview.value = ''
}

// Kategori Yönetim değişkenleri
const showingCategoryModal = ref(false)
const newCategory = ref('')
const editingCategory = ref(null)
const editedCategoryName = ref('')

// Kategori modalını göster
const showCategoryModal = () => {
  showingCategoryModal.value = true
}

// Yeni kategori ekle
const addCategory = async () => {
  if (!canWrite(adminModuleId)) {
    alert('Bu işlemi gerçekleştirmek için yeterli yetkiniz yok')
    return
  }
  
  if (!newCategory.value.trim()) return
  
  // Kategori zaten var mı kontrol et
  if (availableCategories.value.includes(newCategory.value.trim())) {
    alert('Bu kategori zaten mevcut')
    return
  }
  
  try {
    // Yeni kategorileri ekle - burada aslında kategoriler için ayrı bir tablo oluşturulmalı
    // Şimdilik basit olması için mevcut kategorilere ekliyoruz
    availableCategories.value.push(newCategory.value.trim())
    
    // Kategorileri alfabetik sıraya diziyoruz
    availableCategories.value.sort()
    
    // Formu temizle
    newCategory.value = ''
    
  } catch (err) {
    console.error('Kategori eklenirken hata:', err)
    alert('Kategori eklenirken bir hata oluştu')
  }
}

// Kategori düzenleme modunu aç
const editCategory = (category) => {
  editingCategory.value = category
  editedCategoryName.value = category
}

// Kategori düzenlemeyi iptal et
const cancelCategoryEdit = () => {
  editingCategory.value = null
  editedCategoryName.value = ''
}

// Kategoriyi güncelle
const updateCategory = async () => {
  if (!canWrite(adminModuleId)) {
    alert('Bu işlemi gerçekleştirmek için yeterli yetkiniz yok')
    return
  }
  
  if (!editedCategoryName.value.trim()) return
  
  try {
    // Kategoriyi güncelle
    const oldName = editingCategory.value
    const newName = editedCategoryName.value.trim()
    
    // Kategori zaten var mı kontrol et
    if (oldName !== newName && availableCategories.value.includes(newName)) {
      alert('Bu kategori zaten mevcut')
      return
    }
    
    // Menü öğelerinin kategorilerini de güncelle
    menuItems.value.forEach(item => {
      if (item.category === oldName) {
        item.category = newName
      }
    })
    
    // Kategori listesinden eski kategoriyi kaldır ve yenisini ekle
    const index = availableCategories.value.indexOf(oldName)
    if (index !== -1) {
      availableCategories.value.splice(index, 1, newName)
      // Kategorileri alfabetik sıraya diz
      availableCategories.value.sort()
    }
    
    // Düzenleme modunu kapat
    editingCategory.value = null
    editedCategoryName.value = ''
    
  } catch (err) {
    console.error('Kategori güncellenirken hata:', err)
    alert('Kategori güncellenirken bir hata oluştu')
  }
}

// Kategori sil
const deleteCategory = async (category) => {
  if (!canWrite(adminModuleId)) {
    alert('Bu işlemi gerçekleştirmek için yeterli yetkiniz yok')
    return
  }
  
  // Kategori kullanımda mı kontrol et
  if (isCategoryInUse(category)) {
    alert('Bu kategori kullanımda olduğu için silinemez. Önce bu kategorideki ürünleri başka kategorilere taşıyın.')
    return
  }
  
  if (!confirm(`"${category}" kategorisini silmek istediğinize emin misiniz?`)) return
  
  try {
    // Kategoriyi sil
    const index = availableCategories.value.indexOf(category)
    if (index !== -1) {
      availableCategories.value.splice(index, 1)
    }
    
  } catch (err) {
    console.error('Kategori silinirken hata:', err)
    alert('Kategori silinirken bir hata oluştu')
  }
}

// Kategori kullanımda mı kontrol et
const isCategoryInUse = (category) => {
  return menuItems.value.some(item => item.category === category)
}

// Modalların Durumu
const showingMenuItemForm = ref(false)
const showingCategoryModal = ref(false)
const showMenuModal = ref(false)

// Restoran formunu sıfırla
const resetRestaurantForm = () => {
  // Restoran formunu başlangıç değerlerine sıfırla
  restaurantForm.value = { ...originalRestaurantForm.value }
}

// Hata ve yükleme durumları
const error = ref(null)
const loading = ref(false)

// Orijinal restoran formu (sıfırlama için)
const originalRestaurantForm = ref({
  name: '',
  slug: '',
  address: '',
  phone: '',
  email: '',
  tax_number: ''
})
</script>

<style scoped>
/* Add specific styles if needed */
</style> 